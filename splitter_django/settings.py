"""
Django settings for splitter_django project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import logging
import boto3

load_dotenv()

# Configure logging
logger = logging.getLogger("general_logger")
logger_handler = logging.StreamHandler()
logger_format = logging.Formatter(
    '%(asctime)s|%(levelname)-7s|%(lineno)-3s|%(filename)-30s|%(funcName)-20s|%(message)s')
logger_handler.setFormatter(logger_format)
logger.addHandler(logger_handler)
logger.propagate = False

logger.setLevel(os.getenv("LOG_LEVEL", "DEBUG"))  # Changed to DEBUG for more detailed logs

# Get Keygen Account ID and log it for debugging
KEYGEN_ACCOUNT_ID = os.getenv('KEYGEN_ACCOUNT_ID')
logger.info(f"KEYGEN_ACCOUNT_ID loaded as: {KEYGEN_ACCOUNT_ID}")

# Log AWS credentials status
aws_key_present = bool(os.getenv("AWS_ACCESS_KEY_ID"))
aws_secret_present = bool(os.getenv("AWS_SECRET_ACCESS_KEY"))
logger.info(f"AWS credentials available - Key: {aws_key_present}, Secret: {aws_secret_present}")

try:
    session = boto3.Session(
                aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
                aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
                region_name="us-west-2"  # Added explicit region
            )
    S3 = session.client('s3')
    logger.info("Successfully initialized S3 client")
except Exception as e:
    logger.error(f"Error initializing S3 client: {str(e)}")
    S3 = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DATA_UPLOAD_MAX_MEMORY_SIZE = 500 * 1024 * 1024

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "default-secret-key")

# ✅ CHANGED: DEBUG mode based on environment variable
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

# ✅ CHANGED: Explicit ALLOWED_HOSTS for local development and Fly.io
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '*']  # '*' allows AWS and Fly.io access

# Add Fly.io hostname if FLY_APP_NAME is present
FLY_APP_NAME = os.getenv("FLY_APP_NAME")
if FLY_APP_NAME:
    ALLOWED_HOSTS.append(f"{FLY_APP_NAME}.fly.dev")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',  # Added for Fly.io deployment
    'django.contrib.staticfiles',
    # add custom apps
    'splitter.apps.SplitterConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Added for Fly.io deployment
    'django.contrib.sessions.middleware.SessionMiddleware',  # This must come before our middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'splitter.middleware.LicenseMiddleware',  # Add our custom middleware
]

ROOT_URLCONF = 'splitter_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'splitter_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = Path.joinpath(BASE_DIR, 'media')

# Static files configuration
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    Path.joinpath(BASE_DIR, 'static/branding'),  # Branding assets
    Path.joinpath(BASE_DIR, 'static'),  # Added general static files for local development
]

# STATIC_ROOT ensures both Fly.io and AWS `collectstatic` works
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Define S3 bucket name as a setting for easy reference
S3_BUCKET_NAME = os.getenv('S3_BUCKET_NAME', 'us-audio-bucket-2')

# Beam API
BEAM_API_URL = os.getenv('BEAM_API_URL', 'https://demucs-analysis-74163eb-v7.app.beam.cloud')
BEAM_API_TOKEN = os.getenv('BEAM_API_TOKEN')

# Security settings for HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_TRUSTED_ORIGINS = ['https://songsplit.net', 'https://www.songsplit.net']

# Add Fly.io domain to trusted origins if present
if FLY_APP_NAME:
    CSRF_TRUSTED_ORIGINS.append(f"https://{FLY_APP_NAME}.fly.dev")

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Store sessions in the database
SESSION_COOKIE_AGE = 86400  # 24 hours in seconds
SESSION_SAVE_EVERY_REQUEST = True  # Update the session expiry on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Don't expire when browser closes

# Use file-based sessions for Fly.io
if os.getenv('FLY_APP_NAME'):
    SESSION_ENGINE = 'django.contrib.sessions.backends.file'
    SESSION_FILE_PATH = '/tmp/django_sessions'  # This directory is writable in Fly.io
    os.makedirs(SESSION_FILE_PATH, exist_ok=True)
else:
    # Local development - use file-based sessions with a path in the project directory
    SESSION_ENGINE = 'django.contrib.sessions.backends.file'
    SESSION_FILE_PATH = Path.joinpath(BASE_DIR, 'django_sessions')
    os.makedirs(SESSION_FILE_PATH, exist_ok=True)

# Security settings for production
if not DEBUG:
    # HSTS settings
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # More security headers
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'

    # Enable HTTPS redirect
    SECURE_SSL_REDIRECT = True